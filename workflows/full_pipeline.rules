

import re
import yaml
import os

PIPELINE_VERSION = "2.8.0"


if "--use-singularity" in sys.argv or "--use-apptainer" in sys.argv:
    worflow_path = workflow.snakefile.split("workflows/full_pipeline.rules")[0]
    workflow.deployment_settings.apptainer_args += f' -B {worflow_path}:{worflow_path}'

    containers = yaml.safe_load(open(os.path.join(workflow.basedir,  "../envs/containers/envs.yml"), 'r'))

    
include:
    "resistance.rules"

include:
    "virulence.rules"

include:
    "benchmark.rules"


include:
    "../rules/report_generation/general_report.rules"

include:
    "../rules/report_generation/report_resistance.rules"

include:
    "../rules/report_generation/report_virulence.rules"

include:
    "../rules/report_generation/report_epidemiology.rules"

include:
    "../rules/report_generation/copy_assembly_and_gbk.rules"

include:
    "../rules/taxonomy/gtdbtk.rules"

def get_assembly_list():
    assembly_out =[]
    for reference in reference_genomes:
        if 'assembled_genome' in reference:
            sample = re.match("full_genome_(.*)_assembled_genome", reference).group(1)
            assembly_out.append(f"report/genomes/{sample}.faa")
            assembly_out.append(f"report/genomes/{sample}.fna")
            assembly_out.append(f"report/genomes/{sample}.gbk")
    return assembly_out


rule version:
    output:
        "report/pipeline_version.txt"
    run:
        with open(output[0], 'w') as f:
            f.write(f"Diag_pipeline version {PIPELINE_VERSION}\n")

rule epidemiology:
    input:
        "report/report_epidemiology.html",
        get_assembly_list()

print(read_naming.keys())
print(ref_list)
rule index_reference_genomes:
    input:
        expand("samples/{sample}/annotation/{sample}.fna.fai", sample=[genome for genome in ref_list if (genome != 'cgMLST' and genome in list(read_naming.keys()))]),


rule virulence:
    input:
        "report/report_virulence.html",
        "report/virulence/virulence_detail.tsv",
        expand("report/genomes/{sample}.faa", sample=read_naming.keys()),
        expand("report/genomes/{sample}.gbk", sample=read_naming.keys()),
        expand("report/genomes/{sample}.fna", sample=read_naming.keys()),


rule resistance:
    input:
        "report/report_resistance.html",
        "report/resistance/combined_detail_NR.xlsx",
        "report/resistance/combined_report.docx",
        expand("report/genomes/{sample}.faa", sample=read_naming.keys()),
        expand("report/genomes/{sample}.gbk", sample=read_naming.keys()),
        expand("report/genomes/{sample}.fna", sample=read_naming.keys()),
        expand("report/resistance/combined_report_{sample}.docx", sample=read_naming.keys()),

rule strain_characterization:
    input:
        "report/report_strain_characterization.html",

MTB_tools = ["mykrobe", "tb-profiler", "walker_resistant_annotated", "rgi"]

rule custom_db:
    input:
        # expand("samples/{sample}/resistance/bwa/walker_resistant_annotated/mutations.vcf", sample=read_naming.keys()),
        # expand("samples/{sample}/resistance/bwa/mykrobe_annotated/mutations.vcf", sample=read_naming.keys()),
        #"report/resistance/tb-profiler/tbprofiler_benchmark_FP.out",
        #"report/resistance/rgi_benchmark_FP.out",
        #"report/resistance/mykrobe_benchmark_FP.out",
        #"report/resistance/bwa/walker_resistant_annotated/walker_resistant_annotated_benchmark_FP.out",
        # var frequency
        "report/resistance/tb-profiler/tbprofiler_variant_frequency.tsv",
        "report/resistance/rgi_variant_frequency.tsv",
        "report/resistance/mykrobe_variant_frequency.tsv",
        "report/resistance/bwa/walker_resistant_annotated/walker_resistant_annotated_variant_frequency.tsv",
        # comp phenotype
        "report/resistance/rgi_variant_phenotype.tsv",
        "report/resistance/mykrobe_variant_phenotype.tsv",
        "report/resistance/rgi_variant_phenotype.tsv",
        "report/resistance/tb-profiler/tbprofiler_variant_phenotype.tsv",
        # plots 
        "report/resistance/venn_FN_pyrazinamide.pdf",
        "report/resistance/venn_FP_rifampicin.pdf",
        "report/resistance/venn_FP_pyrazinamide.pdf",
        "report/resistance/venn_FP_ethambutol.pdf",
        # benchmark
        "report/resistance/rgi_benchmark_counts.tsv",
        "report/resistance/rgi_benchmark_discrepancies.tsv",
        "report/resistance/rgi_benchmark_FN.tsv",
        "report/resistance/rgi_benchmark_FP.tsv",
        "report/resistance/rgi_benchmark_stats.tsv",

        # expand("samples/{sample}/resistance/tb-profiler/results/{sample}.results.json", sample=read_naming.keys())


'''
- we set a rule order to be able to extract core SNP data from the complete reference genome data
(without mapping of the linked cgMLST genome which is the same as the reference one)
'''

