import pandas
import yaml

containers = yaml.safe_load(open(os.path.join(workflow.basedir,  "../../envs/singularity/envs.yml"), 'r'))

include:
    "../logging.rules"
    
include:
    "../../rules/downloading/fetch_single_reference.rules"
    
enterobase = pandas.read_csv(workflow.basedir + "/../../data/core_genome_dbs/enterobase_database.tsv", sep="\t", index_col=0)

rule get_schema_from_enterobase:
    input:
        data = workflow.basedir + "/../../data/{spec}/cgMLST.tsv"
    output:
        gene_list = "core_genomes/cgMLST/{spec}/genes.txt",
    shell:
        """
        cut -f 2 {input[data]} | cut -f 1 -d' ' | tail -n +2 > {output[gene_list]}
        """

rule fetch_gene_entries_from_locus_tag:
    container:
        containers["python_r"]
    conda:
        "../../envs/biopython.yml"
    input:
        gbk = lambda wildcards : "references/" + str(enterobase.loc[wildcards.spec, "ReferenceGenome"]) + "/genome_gbff.gbff",
        locus_list = "core_genomes/cgMLST/{spec}/genes.txt",
    output:
        bed = "core_genomes/cgMLST/{spec}_unmerged.bed",
        problematic = "core_genomes/cgMLST/{spec}/enterobase_missing.txt",
    script:
        "../../rules/core_genome/scripts/parse_gff_extract_locus_tags.py"


rule merge_bed_file:
    container:
        containers["bedtools"]
    conda:
        "../../envs/bedtools.yml"
    input:
        bed = "core_genomes/cgMLST/{spec}_unmerged.bed",
    output:
        bed_merged = "core_genomes/cgMLST/{spec}.bed",
    shell:
        """
        bedtools merge -i {input[bed]} | sort -k2 -g > {output[bed_merged]}
        """

