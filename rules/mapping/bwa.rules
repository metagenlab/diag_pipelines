
ruleorder: map_paired_reads_with_bwa_for_direct_sequencing > map_single_reads_with_bwa_for_direct_sequencing

def check_if_paired(wildcards):
    
    if len(read_naming[wildcards.sample]) == 2:
        return ["samples/{sample}/reads/trimmed/R1_paired.fastq",
                "samples/{sample}/reads/trimmed/R2_paired.fastq"]
    else:
        return ["samples/{sample}/reads/trimmed/single.fastq"]


rule map_paired_reads_with_bwa:
    conda:
        "../../envs/bwa-samtools.yml"
    container:
        containers["bwa_samtools"]
    params:
        platform = "ILLUMINA"
    input:
        fastq = check_if_paired,
        ref = "references/{ref}/genome_fna.fna",
        ref_index = "references/{ref}/genome_fna.fna.bwt",
    output:
        temp("samples/{sample}/mapping/bwa/{ref}.bam"),
    log:
        logging_folder+"samples/{sample}/logs/mapping/bwa/{ref}/log.txt"
    shell:
        """
        if ls {output[0]}.tmp* 1> /dev/null 2>&1
        then
             rm {output[0]}.tmp*
        fi
        (bwa mem -R '@RG\\tID:{wildcards.sample}\\tSM:{wildcards.sample}\\tPL:{params.platform}' {input[ref]} {input[fastq]} -v 1 | samtools sort -O BAM -o {output[0]}) 2> {log}
        """

'''
rule map_single_reads_with_bwa:
    conda:
        "../../envs/bwa-samtools.yml"
    container:
        "docker://metagenlab/bwa-samtools:1.0"
    params:
        platform = "ILLUMINA"
    input:
        fastq = "samples/{sample}/reads/trimmed/single.fastq",
        ref = "references/{ref}/genome_fna.fna",
        ref_index = "references/{ref}/genome_fna.fna.bwt",
    output:
        temp("samples/{sample}/mapping/bwa/{ref}.bam"),
    log:
        logging_folder+"samples/{sample}/logs/mapping/bwa/{ref}/log.txt"
    shell:
        """
        if ls {output[0]}.tmp* 1> /dev/null 2>&1
        then
             rm {output[0]}.tmp*
        fi
        (bwa mem -R '@RG\\tID:{wildcards.sample}\\tSM:{wildcards.sample}\\tPL:{params.platform}' {input[ref]} {input[fastq]} -v 1 | samtools sort -O BAM -o {output[0]}) 2> {log}
        """
'''


rule mapping_depth:
    conda:
        "../../envs/bwa-samtools.yml"
    container:
        containers["bwa_samtools"]  
    input:
        "samples/{sample}/mapping/bwa/{ref}.bam",
    output:
        "samples/{sample}/quality/mapping/{mapping_method}/{ref}/mapping.depth",
    shell:
        """
        samtools depth -a {input[0]} > {output[0]}
        """

rule map_paired_reads_with_bwa_for_direct_sequencing:
    conda:
        "../../envs/bwa-samtools.yml"
    container:
        containers["bwa_samtools"]
    params:
        platform = "ILLUMINA"
    input:
        fastq1 = "samples/{sample}/reads/trimmed/R1_paired.fastq",
        fastq2 = "samples/{sample}/reads/trimmed/R2_paired.fastq",
        ref = "references/{ref}/genome_fna.fna",
        ref_index = "references/{ref}/genome_fna.fna.bwt",
    output:
        temp("samples/{sample}/mapping/bwa_stringent/{ref}.bam"),
    log:
        logging_folder+"samples/{sample}/mapping/bwa_stringent/{ref}/log.txt"
    shell:
        """
        if ls {output[0]}.tmp* 1> /dev/null 2>&1
        then
             rm {output[0]}.tmp*
        fi
        (bwa mem -R '@RG\\tID:{wildcards.sample}\\tSM:{wildcards.sample}\\tPL:{params.platform}' {input[ref]} {input[fastq1]} {input[fastq2]} -v 1 -k 80 | samtools sort -O BAM -o {output[0]}) 2> {log}
        """


rule map_single_reads_with_bwa_for_direct_sequencing:
    conda:
        "../../envs/bwa-samtools.yml"
    container:
        containers["bwa_samtools"]
    params:
        platform = "ILLUMINA"
    input:
        fastq = "samples/{sample}/reads/trimmed/single.fastq",
        ref = "references/{ref}/genome_fna.fna",
        ref_index = "references/{ref}/genome_fna.fna.bwt",
    output:
        temp("samples/{sample}/mapping/bwa_stringent/{ref}.bam"),
    log:
        logging_folder+"samples/{sample}/logs/mapping/bwa_stringent/{ref}/log.txt"
    shell:
        """
        if ls {output[0]}.tmp* 1> /dev/null 2>&1
        then
             rm {output[0]}.tmp*
        fi
        (bwa mem -R '@RG\\tID:{wildcards.sample}\\tSM:{wildcards.sample}\\tPL:{params.platform}' {input[ref]} {input[fastq]} -v 1 -k 80 | samtools sort -O BAM -o {output[0]}) 2> {log}
        """

rule filter_reads_on_quality:
    conda:
        "../../envs/bwa-samtools.yml"
    container:
        containers["bwa_samtools"]    
    input:
        bam = "samples/{sample}/mapping/{mapping_method}/{ref}.bam",
        bam_bai = "samples/{sample}/mapping/{mapping_method}/{ref}.bam.bai",
        ref = "references/{ref}/genome_fna.fna",
        ref_index = "references/{ref}/genome_fna.fna.bwt",
    output:
        temp("samples/{sample}/mapping/{mapping_method}/{ref}/filtered.bam"),
    shell:
        """
        if ls {output[0]}.tmp* 1> /dev/null 2>&1
        then
            rm {output[0]}.tmp*
        fi
        samtools view -q 60 -b -u -F 3844 -T {input[ref]} {input[bam]} | samtools sort -O bam -o {output[0]}
        """

rule remove_duplicates_from_mapping:
    conda:
        "../../envs/gatk.yml"
    container:
        containers["gatk4"]
    input:
        bam = "samples/{sample}/mapping/{mapping_method}/{ref}/filtered.bam",
        bam_bai = "samples/{sample}/mapping/{mapping_method}/{ref}/filtered.bam.bai",
    output:
        temp("samples/{sample}/mapping/{mapping_method}/{ref}/deduplicated_filtered.bam"),
    log:
         logging_folder + "samples/{sample}/mapping/{mapping_method}/{ref}/metrics_deduplicated.txt",
         logging_folder + "samples/{sample}/mapping/{mapping_method}/{ref}/markduplicates.txt",
    shell:
        """
        gatk --java-options "-Xmx10G" MarkDuplicates --REMOVE_DUPLICATES true -I {input[bam]} -O {output[0]} -M {log[0]} &> {log[1]}
        """

rule extract_large_deletion_from_mapping:
    conda:
        "../../envs/bedtools.yml"
    container:
        containers["bedtools"]       
    params:
        indel_im_size = 10
    input:
        bam = "samples/{sample}/mapping/{mapping_method}/{ref}.bam",
        bam_bai = "samples/{sample}/mapping/{mapping_method}/{ref}.bam.bai",
    output:
        "samples/{sample}/indel/{mapping_method}/{ref}/indel.bed",
    shell:
        """
        bedtools genomecov -ibam {input[0]} -bga -split | (grep -w 0$ || true) | awk '($3-$2) >= {params[0]}' > {output[0]}
        """
