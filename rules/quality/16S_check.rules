
if "16S_database" in config:

    rule extract_16S_with_barnap:
        container:
            "docker://quay.io/biocontainers/barrnap:0.9--3"
        input:
            "samples/{sample}/assembly/spades/contigs.fasta"
        output:
            "samples/{sample}/contamination/markers/rrna/{sample}_barrnap.gff",
            "samples/{sample}/contamination/markers/rrna/{sample}_barrnap.ffn",
        shell:
            """
            barrnap --outseq {output[1]} --quiet {input} > {output[0]}
            """

    rule extract_16S:
        container:
            containers["python_r"]
        input:
            "samples/{sample}/contamination/markers/rrna/{sample}_barrnap.ffn",
        output:
            "samples/{sample}/contamination/markers/rrna/{sample}_barrnap_16S.ffn",
        script:
            "scripts/extract_16S.py"

    rule merge_16S:
        container:
            containers["python_r"]
        input:
            expand("samples/{sample}/contamination/markers/rrna/{sample}_barrnap_16S.ffn", sample=read_naming.keys()),
        output:
            "report/contamination/markers/rrna/merged_barrnap_16S.ffn",
        script: "scripts/combine_16S.py"

    rule align_16S_with_mafft:
        container:
            containers["mafft"]
        input:
            "report/contamination/markers/rrna/merged_barrnap_16S.ffn",
        output:
            "report/contamination/markers/rrna/merged_barrnap_16S_mafft.ffn",
        shell:
            """
            mafft --quiet {input} > {output}
            """

    rule calculate_parwise_identity:
        container:
            containers["python_r"]
        input:
            "report/contamination/markers/rrna/merged_barrnap_16S_mafft.ffn"
        output:
            # report/contamination/markers/rrna/pairwise_id.tab
            "report/contamination/markers/rrna/pairwise_id.tab"
        script:
            "scripts/calculate_pairwise_id_from_alignment.py"


    rule assign_taxonomy_vsearch:
        container:
            containers["vsearch"]
        input:
            "samples/{sample}/contamination/markers/rrna/{sample}_barrnap_16S.ffn"
        output:
            "samples/{sample}/contamination/markers/rrna/{sample}_vsearch.txt"
        params:
            db_16s = config["16S_database"]
        shell:
            """
            # (for domain) k (kingdom), p (phylum), c (class), o (order), f (family), g (genus), or s (species)
            # vsearch --sintax fastafile --db fastafile --tabbedout outputfile
            vsearch --sintax {input[0]} --db {params.db_16s} --tabbedout {output[0]}
            """

    rule QIIME1_assign_taxonomy_rdp:
        container:
            containers["rdp"] 
        input:
            "report/contamination/markers/rrna/merged_barrnap_16S.ffn",
            "/data/databases/amplicon_based_metagenomics/16S/ezbiocloud201805/QIIME/DB_amp.fasta",
            "/data/databases/amplicon_based_metagenomics/16S/ezbiocloud201805/QIIME/DB_amp_taxonomy.txt"
        output:
            "report/contamination/markers/rrna/merged_rdp.txt"
        threads:
            1
        shell:
            '''
            export RDP_JAR_PATH=$(command -v rdp_classifier-2.2.jar);
            assign_path=$(which assign_taxonomy.py)
            python $assign_path \
            -i {input[0]} \
            -r {input[1]} \
            -t {input[2]} \
            -m rdp \
            -o $(dirname {output[0]}) \
            -c 0.5 \
            --rdp_max_memory 30000
            '''


    rule assign_taxonomy_ssearch:
        container:
            containers["fasta36"]
        container:
            "docker://quay.io/biocontainers/vsearch:2.15.0--h2d02072_0"
        input:
            "samples/{sample}/contamination/markers/rrna/{sample}_barrnap_16S.ffn",
            config["16S_database"],
        output:
            "report/contamination/markers/rrna/{sample}_ssearch.txt"
        log:
            "report/contamination/markers/rrna/{sample}_ssearch.log"
        shell:
            """
            # keep only best hit
            echo ssearch36 -b 1 -m 10 -n -z 3 {input[0]} {input[1]}
            ssearch36 -b 1 -m 10 -n -z 3 {input[0]} {input[1]} 1> {output[0]} 2> {log}
            """


    rule format_taxonomy_ssearch:
        container:
            containers["python_r"]
        input:
            expand("report/contamination/markers/rrna/{sample}_ssearch.txt", sample=read_naming.keys())
        output:
            "report/contamination/markers/rrna/summary.txt"
        script:
            "scripts/ssearch_summary.py"
