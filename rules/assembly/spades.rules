
def check_if_paired(wildcards):
    
    if len(read_naming[wildcards.sample]) == 2:
        return ["samples/{sample}/reads/trimmed/R1_paired.fastq",
                "samples/{sample}/reads/trimmed/R1_paired.fastq"]
    else:
        return ["samples/{sample}/reads/trimmed/R_paired.fastq"]


rule correct_error_paired_reads_with_spades:
    conda:
        "../../envs/spades.yml"
    container:
       containers["spades"]
    threads:
        4
    input:
        R1_trimmed = "samples/{sample}/reads/trimmed/R1_paired.fastq",
        R2_trimmed = "samples/{sample}/reads/trimmed/R2_paired.fastq",
    output:
        R1_corrected = temp("samples/{sample}/reads/corrected/R1_paired.00.0_0.cor.fastq.gz"),
        R2_corrected = temp("samples/{sample}/reads/corrected/R2_paired.00.0_0.cor.fastq.gz"),
        single_corrected = temp("samples/{sample}/reads/corrected/R_unpaired.00.0_0.cor.fastq.gz"),
    log:
        logging_folder + "samples/{sample}/spades_read_correction.txt"
    shell:
         """
         spades.py --only-error-correction -1 {input[R1_trimmed]} -2 {input[R2_trimmed]} -o $(dirname $(dirname {output[0]})) --threads {threads} > {log}
         """

rule correct_error_single_reads_with_spades:
    conda:
        "../../envs/spades.yml"
    container:
        containers["spades"]
    threads:
        4
    input:
        single_trimmed = "samples/{sample}/reads/trimmed/single.fastq",
    output:
        single_corrected = temp("samples/{sample}/reads/corrected/single.00.0_0.cor.fastq.gz")
    log:
        logging_folder + "samples/{sample}/spades_read_correction.txt"
    shell:
         """
         spades.py --only-error-correction  -s {input[single_trimmed]} -o $( dirname $(dirname {output[single_corrected]})) --threads {threads} > {log}
         """

ruleorder: assemble_genome_corrected_paired_reads_with_spades > assemble_genome_corrected_single_reads_with_spades


rule assemble_genome_corrected_paired_reads_with_spades:
    conda:
        "../../envs/spades.yml"
    container:
        containers["spades"]
    threads:
        4
    input:
        R1_corrected = "samples/{sample}/reads/corrected/R1_paired.00.0_0.cor.fastq.gz",
        R2_corrected = "samples/{sample}/reads/corrected/R2_paired.00.0_0.cor.fastq.gz",
        single_corrected = "samples/{sample}/reads/corrected/R_unpaired.00.0_0.cor.fastq.gz",
    output:
        contigs = "samples/{sample}/assembly/spades/contigs.fasta",
        graph = "samples/{sample}/assembly/spades/assembly_graph.fastg",
        scaffolds = "samples/{sample}/assembly/spades/scaffolds.fasta",
        contigs_paths = "samples/{sample}/assembly/spades/contigs.paths",
        scaffolds_paths = "samples/{sample}/assembly/spades/scaffolds.paths",
    params:
        kmer_sizes = config["spades_kmer_sizes"]
    log:
        logging_folder + "samples/{sample}/spades_assembly.txt"
    shell:
        """
        # 21,33,55,77,99,127
        spades.py --only-assembler -k {params.kmer_sizes} -1 {input[R1_corrected]} -2 {input[R2_corrected]} -s {input[single_corrected]} -o $(dirname {output[contigs]}) --threads {threads} > {log}
        """


rule assemble_genome_corrected_single_reads_with_spades:
    conda:
        "../../envs/spades.yml"
    container:
        containers["spades"]
    threads:
        4
    input:
        single_corrected = "samples/{sample}/reads/corrected/single.00.0_0.cor.fastq.gz",
    output:
        contigs = "samples/{sample}/assembly/spades/contigs.fasta",
        graph = "samples/{sample}/assembly/spades/assembly_graph.fastg",
        scaffolds = "samples/{sample}/assembly/spades/scaffolds.fasta",
        contigs_paths = "samples/{sample}/assembly/spades/contigs.paths",
        scaffolds_paths = "samples/{sample}/assembly/spades/scaffolds.paths",
        log = "samples/{sample}/assembly/spades/spades.log",
    params:
        kmer_sizes = config["spades_kmer_sizes"]
    log:
        logging_folder + "samples/{sample}/spades_assembly.txt"
    shell:
        """
        spades.py --only-assembler -k {params.kmer_sizes} -s {input[single_corrected]} -o $(dirname {output[contigs]}) --threads {threads} > {log}
        """

rule assemble_genome_paired_reads_with_spades:
    conda:
        "../../envs/spades.yml"
    container:
        containers["spades"]
    threads:
        4
    input:
        R1_trimmed = "samples/{sample}/reads/trimmed/R1_paired.fastq",
        R2_trimmed = "samples/{sample}/reads/trimmed/R2_paired.fastq",
    output:
        contigs = "samples/{sample}/assembly/spades_no_correction/contigs.fasta",
        graph = "samples/{sample}/assembly/spades_no_correction/assembly_graph.fastg",
        scaffolds = "samples/{sample}/assembly/spades_no_correction/scaffolds.fasta",
        contigs_paths = "samples/{sample}/assembly/spades_no_correction/contigs.paths",
        scaffolds_paths = "samples/{sample}/assembly/spades_no_correction/scaffolds.paths",
        log = "samples/{sample}/assembly/spades_no_correction/spades.log",
    log:
        logging_folder + "samples/{sample}/spades_assembly.txt"
    shell:
        """
        spades.py --only-assembler -1 {input[R1_trimmed]} -2 {input[R2_trimmed]} -o $(dirname {output[contigs]}) > {log}
        """

rule assemble_genome_single_reads_with_spades:
    conda:
        "../../envs/spades.yml"
    container:
        containers["spades"]
    threads:
        4
    input:
        single_trimmed = "samples/{sample}/reads/trimmed/single.fastq",
    output:
        contigs = "samples/{sample}/assembly/spades_no_correction/contigs.fasta",
        graph = "samples/{sample}/assembly/spades_no_correction/assembly_graph.fastg",
        scaffolds = "samples/{sample}/assembly/spades_no_correction/scaffolds.fasta",
        contigs_paths = "samples/{sample}/assembly/spades_no_correction/contigs.paths",
        scaffolds_paths = "samples/{sample}/assembly/spades_no_correction/scaffolds.paths",
        log = "samples/{sample}/assembly/spades_no_correction/spades.log",
    shell:
        """
        spades.py --only-assembler -s {input[single_trimmed]} -o $( dirname {output[contigs]}) > /dev/null
        """
