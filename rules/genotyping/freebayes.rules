rule genotype_with_freebayes_on_all_samples:
    conda:
        "../../envs/freebayes.yml"
    container:
        containers["freebayes"]
    threads:
        4
    input:
        bams=expand("samples/{sample}/mapping/{{mapping_method}}/{{ref}}/deduplicated_filtered.bam", sample=read_naming.keys()),
        bais=expand("samples/{sample}/mapping/{{mapping_method}}/{{ref}}/deduplicated_filtered.bam.bai", sample=read_naming.keys()),
        ref="references/{ref}/genome_fna.fna",
        ref_fai="references/{ref}/genome_fna.fna.fai",
        quality = "report/multiqc_mapping_to_{ref}/{mapping_method}/multiqc_report.html",
    output:
        vcf="typing/freebayes_joint_genotyping/full_genome_{ref}/{mapping_method}/raw/all_samples.vcf"
    log:
        logging_folder+"freebayes_joint_genotyping/{mapping_method}/mapping_to_{ref}_all_samples.txt"
    shell:
        """
        freebayes-parallel <(fasta_generate_regions.py {input[ref_fai]} 100000) {threads} --ploidy 1 --min-base-quality 20 --genotype-qualities --fasta-reference {input[ref]} --haplotype-length -1 {input[bams]}  > {output[vcf]} 2> {log}
        """


rule genotype_with_freebayes_one_sample_second_pass:
    conda:
        "../../envs/freebayes.yml"
    container:
        containers["freebayes"]
    input:
        bam = "samples/{sample}/mapping/{mapping_method}/{ref}/deduplicated_filtered.bam",
        bai = "samples/{sample}/mapping/{mapping_method}/{ref}/deduplicated_filtered.bam.bai",
        ref = "references/{ref}/genome_fna.fna",
        ref_fai = "references/{ref}/genome_fna.fna.fai",
        quality = "report/multiqc_mapping_to_{ref}/multiqc_report.html",
        variants = "typing/freebayes_two_pass/full_genome_{ref}/{mapping_method}/positions.vcf",
    output:
        vcf = temp("samples/{sample}/typing/freebayes/second_pass/full_genome_{ref}/{mapping_method}/genotyping.vcf")
    log:
        logging_folder + "samples/{sample}/typing/freebayes/second_pass/full_genome_{ref}/{mapping_method}/genotyping.txt"
    shell:
        """
        freebayes --ploidy 1 --min-base-quality 20 --genotype-qualities --fasta-reference {input[ref]} --haplotype-length -1 --variant-input {input[variants]} --vcf {output[vcf]} {input[bam]} 2> {log}
        """
