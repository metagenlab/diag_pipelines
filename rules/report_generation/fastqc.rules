rule assess_quality_single_reads_with_fastqc:
    conda:
        "../../envs/fastqc.yml"
    container:
        containers["fastqc"]
    input:
        "samples/{sample}/reads/trimmed/single.fastq",
    output:
        "samples/{sample}/reads/trimmed/fastqc/single_fastqc.zip",
        "samples/{sample}/reads/trimmed/fastqc/single_fastqc.html",
    log:
        logging_folder + "samples/{sample}/reads/trimmed/fastqc.txt",
    shell:
        "fastqc {input} -o $( dirname {output[0]}) &> {log}"

        
rule assess_quality_paired_reads_with_fastqc:
    conda:
        "../../envs/fastqc.yml"
    container:
        containers["fastqc"]
    input:
        "samples/{sample}/reads/trimmed/R1_paired.fastq",
        "samples/{sample}/reads/trimmed/R2_paired.fastq"
    output:
        "samples/{sample}/reads/trimmed/fastqc/R1_paired_fastqc.zip",
        "samples/{sample}/reads/trimmed/fastqc/R2_paired_fastqc.zip",
        "samples/{sample}/reads/trimmed/fastqc/R1_paired_fastqc.html",
        "samples/{sample}/reads/trimmed/fastqc/R2_paired_fastqc.html",
    log:
        logging_folder + "samples/{sample}/reads/trimmed/fastqc.txt",
    shell:
        "fastqc {input} -o $( dirname {output[0]}) &> {log}"


rule unzip_fastqc_single:
    input:
        "samples/{sample}/reads/trimmed/fastqc/single_fastqc.zip",
    output:
        "samples/{sample}/reads/trimmed/fastqc/single_fastqc/summary.txt",
    shell:
        """
        unzip -o -q -D -u {input[0]} -d $( dirname {input[0]})
        touch {output[0]}
        """
    
rule unzip_fastqc_paired:
    input:
        "samples/{sample}/reads/trimmed/fastqc/R1_paired_fastqc.zip",
        "samples/{sample}/reads/trimmed/fastqc/R2_paired_fastqc.zip"
    output:
        "samples/{sample}/reads/trimmed/fastqc/R1_paired_fastqc/summary.txt",
        "samples/{sample}/reads/trimmed/fastqc/R2_paired_fastqc/summary.txt"
    shell:
        """
        unzip -o -q -D -u {input[0]} -d $( dirname {input[0]})
        unzip -o -q -D -u {input[1]} -d $( dirname {input[0]})
        touch {output[0]}
        touch {output[1]}
        """
