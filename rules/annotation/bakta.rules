
def get_genus(wildcards):
    try:
        genus = all_samples.loc[wildcards.sample, "ScientificName"].split("_")[0]
    except:
        genus = "Unknown"
    return genus

def get_species(wildcards):
    try:
        species = all_samples.loc[wildcards.sample, "ScientificName"].split("_")[1]
    except:
        species = "unknown"
    return species


rule annotate_with_bakta:
    container:
        containers["bakta"]
    input:
        contigs = "samples/{sample}/assembly/spades/coverage_filtered/bwa/contigs_500bp_high_coverage.fasta",
    threads: 8
    output:
        "samples/{sample}/annotation/{sample}.gff3",
        "samples/{sample}/annotation/{sample}.faa",
        "samples/{sample}/annotation/{sample}.txt",
        "samples/{sample}/annotation/{sample}.gbff",
        "samples/{sample}/annotation/{sample}.ffn",
        "samples/{sample}/annotation/{sample}.fna",
    log:
        "samples/{sample}/annotation/spades/{sample}.txt",
    params:
        genus = get_genus,
        spec = get_species,
        database = config["bakta_db"],
    shell:
        """
        export LC_ALL=C
        bakta --threads {threads} --db {params[database]} --compliant --output samples/{wildcards.sample}/annotation --prefix {wildcards.sample} --strain {wildcards.sample} --genus '{params.genus}' --species '{params.spec}' --locus-tag 'CHUV' --complete {input[contigs]}
        unset LC_ALL
        """

rule get_plasmids_platon:
    container:
        containers["platon"]
    input:
        contigs = "samples/{sample}/assembly/spades/coverage_filtered/bwa/contigs_500bp_high_coverage.fasta",
    params:
	    database = config["platon_db"]
    output:
        "samples/{sample}/plasmids/{sample}.tsv",
    shell:
        """
        export LC_ALL=C
        platon --db {params[database]} --output samples/{wildcards.sample}/plasmids --prefix {wildcards.sample} {input[contigs]}
        unset LC_ALL
        """

rule annotate_with_bakta_unfiltered_assembly:
    container:
        containers["bakta"]
    input:
        contigs = "samples/{sample}/assembly/spades_no_correction/contigs.fasta",
    params:
	    database = config["bakta_db"],
    output:
        "samples/{sample}/annotation/spades_no_correction/{sample}.fsa"
    threads: 8
    params:
        genus = lambda wildcards: str(all_samples.loc[wildcards.sample, "ScientificName"]).split("_")[0],
        spec = lambda wildcards: str(all_samples.loc[wildcards.sample, "ScientificName"]).split("_")[1],
        database = config["bakta_db"],
    shell:
        """
        export LC_ALL=C
	bakta --threads {threads} --db {params[database]} --compliant --output $( dirname {output[0]}) --prefix {wildcards.sample} --strain {wildcards.sample} --genus '{params.genus}' --species '{params.spec}' --locus-tag 'bakta' --complete {input[contigs]}
        unset LC_ALL
        """


rule create_blast_database_from_protein_sequences:
    conda:
        "../../envs/blast.yml"
    container:
        containers["blast"]
    input:
        proteins = "samples/{sample}/annotation/{sample}.faa",
    output:
        "samples/{sample}/annotation/{sample}.faa.phr",
    shell:
        """
        makeblastdb -dbtype prot -in {input[proteins]}
        """

rule create_blast_database_from_contig_sequences:
    conda:
        "../../envs/blast.yml"
    container:
        containers["blast"]
    input:
        contigs = "samples/{sample}/annotation/{sample}.fna",
    output:
        "samples/{sample}/annotation/{sample}.fna.nhr",
    shell:
        """
        makeblastdb -dbtype nucl -in {input[contigs]}
        """

rule remove_fasta_part_from_gff:
    conda:
        "../../envs/python-r.yml"
    container:
        containers["python_r"]
    input:
        "samples/{sample}/annotation/{sample}.gff3"
    output:
        "samples/{sample}/annotation/{sample}_truncated.gff3"
    shell:
        "sed '/^##FASTA$/,$d' {input} > {output}"

rule get_CDS_and_contigs_depth:
    conda:
        "../../envs/python-r.yml"
    container:
        containers["python_r"]
    input:
        "samples/{sample}/assembly/spades/contigs_500bp_renamed.fasta",
        "samples/{sample}/annotation/{sample}.gbff",
        "samples/{sample}/quality/mapping/{mapping_method}/{ref}/mapping.depth",
    output:
        "samples/{sample}/quality/mapping/{mapping_method}/{ref}/CDS_depth.tab",
        "samples/{sample}/quality/mapping/{mapping_method}/{ref}/contig_gc_depth_500bp_high_coverage.tab"
    script:
        "scripts/calculate_CDS_depth.py"


rule copy_filtered_assembly_to_reference_folder:
    input:
        contigs = "samples/{sample}/annotation/{sample}.fna",
        gbk = "samples/{sample}/annotation/{sample}.gbff",
    output:
        fasta_ref = "references/{sample}_assembled_genome/genome_filtered.fna",
        gbk_ref = "references/{sample}_assembled_genome/genome_filtered.gbk",
    shell:
        """
        cp {input[0]} {output[fasta_ref]}
        cp {input[1]} {output[gbk_ref]}
        """


rule copy_filtered_assembly_to_report_folder:
    input:
        "samples/{sample}/annotation/{sample}.faa",
        "samples/{sample}/annotation/{sample}.gbff",
        "samples/{sample}/annotation/{sample}.fna",
    output:
        "report/genomes/{sample}.faa",
        "report/genomes/{sample}.gbk",
        "report/genomes/{sample}.fna",
    shell:
        """
        cp {input[0]} {output[0]}
        cp {input[1]} {output[1]}
        cp {input[2]} {output[2]}
        """
