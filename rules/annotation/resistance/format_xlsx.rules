rule convert_tsv_to_xlsx:
    conda:
        "../../../envs/python-r.yml"
    container:
        containers["python_r"]
    input:
        tsv = "samples/{sample}/resistance/{software}_{sample}.tsv",
    output:
        xlsx = "samples/{sample}/resistance/{software,[a-z]+}_{sample}.xlsx",
    script:
        "scripts/convert_tsv_to_xlsx.py"


rule convert_csv_to_xlsx:
    conda:
        "../../../envs/python-r.yml"
    container:
        containers["python_r"]
    input:
        tsv = "samples/{sample}/resistance/{software}_{sample}.csv",
    output:
        xlsx = "samples/{sample}/resistance/{software,[a-z]+}_{sample}.xlsx",
    script:
        "scripts/convert_csv_to_xlsx.py"



rule merge_rgi_or_mykrobe_xlsx:
    conda:
        "../../../envs/python-r.yml"
    container:
        containers["python_r"]
    input:
        xlsx = expand("samples/{sample}/resistance/{{software}}_{sample}.xlsx", sample=read_naming.keys())
    output:
        "report/resistance/{software,[A-Z,a-z]+}_summary.xlsx"
    script:
        "scripts/merge_non_empty_results.py"

rule merge_rgi_ontology_xlsx:
    conda:
        "../../../envs/python-r.yml"
    container:
        containers["python_r"]
    input:
        xlsx = expand("samples/{sample}/resistance/rgi_ontology.xlsx", sample=read_naming.keys())
    output:
        "report/resistance/rgi_ontology.xlsx"
    script:
        "scripts/merge_non_empty_results.py"
