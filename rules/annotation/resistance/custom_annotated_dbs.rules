rule keep_only_annotated_region:
    conda:
        "../../envs/bcftools.yml"
    container:
        containers["bcftools"]
    input:
        genotype = "samples/{sample}/snps/gatk/" + reference_assembly_for_resistance[species] + "/{bwa_or_stringent}/snps.g.vcf.gz",
        genotype_tbi = "samples/{sample}/snps/gatk/" + reference_assembly_for_resistance[species] + "/{bwa_or_stringent}/snps.g.vcf.gz.tbi",
        bed_gz_correct = "resistance_db/" + species + "/mutations/{db}/correct.bed.gz",
    output:
        genotype = "samples/{sample}/resistance/{bwa_or_stringent}/{db}/snps_region_filtered.g.vcf",
    shell:
        """
        bcftools view --regions-file {input[bed_gz_correct]} {input[genotype]} > {output[genotype]}
        """

rule decompose_multiallelic_positions_from_genotyping:
    conda:
        "../../envs/vt.yml"
    container:
        containers["vt"]
    input:
        genotype = "samples/{sample}/resistance/{bwa_or_stringent}/{db}/snps_region_filtered.g.vcf.gz",
        genotype_tbi = "samples/{sample}/resistance/{bwa_or_stringent}/{db}/snps_region_filtered.g.vcf.gz.tbi",
        reference = "references/" + reference_assembly_for_resistance[species] + "/genome_fna.fna",
    output:
        genotype_decomposed = "samples/{sample}/resistance/{bwa_or_stringent}/{db}/snps_decomposed.g.vcf",
    log:
        logging_folder + "samples/{sample}/snps/gatk/" + reference_assembly_for_resistance[species] + "/{bwa_or_stringent}/{db}/snps_decomposed.g.vcf",
    shell:
        """
        vt decompose -s {input[genotype]} | vt normalize -r {input[reference]} -o {output[genotype_decomposed]} - &> {log}
        """

rule annotate_positions_from_genotyping:
    conda:
        "../../envs/bcftools.yml"
    container:
        containers["bcftools"]
    input:
        bed_gz_correct = "resistance_db/" + species + "/mutations/{db}/correct.bed.gz",
        bed_tbi_correct = "resistance_db/" + species + "/mutations/{db}/correct.bed.gz.tbi",
        genotype = "samples/{sample}/resistance/{bwa_or_stringent}/{db}/snps_decomposed.g.vcf.gz",
        genotype_tbi = "samples/{sample}/resistance/{bwa_or_stringent}/{db}/snps_decomposed.g.vcf.gz.tbi",
    output:
        annotation = "samples/{sample}/resistance/{bwa_or_stringent}/{db}/annotation.vcf",
        header = temp("samples/{sample}/resistance/{bwa_or_stringent}/{db}/header.txt"),
    shell:
        """
        echo '##INFO=<ID=GENE,Number=1,Type=String,Description="Gene">' >> {output[header]}
        echo '##INFO=<ID=STRAND,Number=1,Type=Integer,Description="Strand">' >> {output[header]}
        echo '##INFO=<ID=POSITION_IN_GENE,Number=1,Type=Integer,Description="Position with respect to Gene">' >> {output[header]}
        echo '##INFO=<ID=WILDTYPE_AA_NUCL,Number=1,Type=String,Description="Wildtype amino acid or nucleotide">' >> {output[header]}
        echo '##INFO=<ID=WILDTYPE_CODON_NUCL,Number=1,Type=String,Description="Wildtype codon or nucleotide">' >> {output[header]}
        bcftools annotate --regions-file {input[bed_gz_correct]} --annotation {input[bed_gz_correct]} --columns CHROM,FROM,TO,INFO/GENE,INFO/STRAND,INFO/POSITION_IN_GENE,INFO/WILDTYPE_AA_NUCL,INFO/WILDTYPE_CODON_NUCL --header-lines {output[header]} {input[genotype]} > {output[annotation]}
        """

rule extract_mutated_codons_or_nucleotides:
    conda:
        "../../envs/bcftools.yml"
    container:
        containers["bcftools"]
    input:
        annotation = "samples/{sample}/resistance/{bwa_or_stringent}/{db}/annotation.vcf",
    output:
        genotype = "samples/{sample}/resistance/{bwa_or_stringent}/{db}/position_genotypes.txt",
    shell:
        """
        bcftools view --include 'FORMAT/AD[0:1]/FORMAT/DP>0.10' {input[annotation]} | bcftools query --format "%CHROM\\t%POS\\t[%INFO/GENE]\\t[%INFO/POSITION_IN_GENE]\\t[%INFO/STRAND]\\n" | while read chrom pos gene position strand
        do
            gt=$(bcftools view --include "INFO/GENE='${{gene}}' && INFO/POSITION_IN_GENE=${{position}}" {input[annotation]} | bcftools view --exclude "GT='.'" | bcftools query --format "[%TGT]")
            echo ${{chrom}} ${{pos}} ${{gt}} ${{strand}} | sed "s/ /\\t/g" >> {output[genotype]}
        done
        touch {output[genotype]}
        """

rule convert_mutated_codons_or_nucleotides_to_aa_or_nucleotides:
    conda:
        "../../envs/python-r.yml"
    container:
        containers["python_r"]
    input:
        genotype = "samples/{sample}/resistance/{bwa_or_stringent}/{db}/position_genotypes.txt",
    output:
        mutation = "samples/{sample}/resistance/{bwa_or_stringent}/{db}/mutations.bed",
    script:
        "scripts/convert_position_to_mutation.py"


rule add_mutated_amino_acid_or_nucleotide_value_to_annotation_and_exclude_synonymous_mutations:
    conda:
        "../../../envs/bcftools.yml"
    container:
        containers["bcftools"]
    input:
        mutation_gz = "samples/{sample}/resistance/{bwa_or_stringent}/{db}/mutations.bed.gz",
        mutation_tbi = "samples/{sample}/resistance/{bwa_or_stringent}/{db}/mutations.bed.gz.tbi",
        annotation = "samples/{sample}/resistance/{bwa_or_stringent}/{db}/annotation.vcf",
    output:
        header = "samples/{sample}/resistance/{bwa_or_stringent}/{db}/header_mutations.txt",
        mutation = "samples/{sample}/resistance/{bwa_or_stringent}/{db}/mutations.vcf",
    shell:
        """
        echo '##INFO=<ID=MUTATED_AA_NUCL,Number=1,Type=String,Description="Mutation in the context of the gene (can be amino acid or nucleotide)">' >> {output[header]}
        echo '##INFO=<ID=MUTATED_CODON_NUCL,Number=1,Type=String,Description="Mutation in the context of the gene (can be codon or nucleotide)">' >> {output[header]}
        bcftools annotate --include 'FORMAT/AD[0:1]/FORMAT/DP>0.10' --annotation {input[mutation_gz]} --columns CHROM,FROM,TO,INFO/MUTATED_AA_NUCL,INFO/MUTATED_CODON_NUCL --header-lines {output[header]} {input[annotation]} | bcftools view --exclude 'INFO/WILDTYPE_AA_NUCL=INFO/MUTATED_AA_NUCL' > {output[mutation]}
        """


