rule blast_virulence_protein_to_proteome_or_contigs:
    conda:
        "../../envs/blast.yml"
    container:
        containers["blast"]
    params:
        perc_id_cutoff=config["virulence_percentage_identity_cutoff"],
        cov_cutoff=config["virulence_coverage_cutoff"],
    input:
        "virulence/protein_fastas/log.txt",
        "samples/{sample}/annotation/{sample}.fna",
        "samples/{sample}/annotation/{sample}.fna.nhr",
        "samples/{sample}/annotation/{sample}.faa",
        "samples/{sample}/annotation/{sample}.faa.phr",
    output:
        "samples/{sample}/virulence/results_blast.tsv",
    shell:
        """
        echo "virulence_factor_ID\tmatching_sequence\tpercentage_identity\talignment_length\tmismatch_number\tgap_number\talignment_start_on_virulence_factor\talignment_end_on_virulence_factor\talignment_start_on_matching_sequence\taligment_end_on_matching_sequence\te-value\tbitscore\tamino_acid_sequence_of_matching_sequence\tquery_coverage\talgorithm" > {output[0]}
        for i in $(ls $(dirname {input[0]})/*.fasta); do
            result=""
            seq_prot_virulence=$(grep -v "^>" ${{i}} | tr -d '[:space:]' )
            if [ "${{#seq_prot_virulence}}" -gt "50" ]
            then
                result=$(blastp -query ${{i}} -db {input[3]} -outfmt "6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore sseq qcovs" | awk '$3>{params.perc_id_cutoff}' | awk '$14>{params.cov_cutoff}' | head -n 1)
                if [ ! -z "${{result}}" ]
                then
                    echo ${{result}} blastp | sed "s/ /\\t/g" >> {output[0]}
                fi
            else
                result=$(tblastn -seg no -word_size 3 -gapextend 1 -gapopen 9 -matrix PAM30 -query ${{i}} -db {input[1]} -outfmt "6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore sseq qcovs" | awk '$3>{params.perc_id_cutoff}' | awk '$14>{params.cov_cutoff}' | head -n 1)
                if [ ! -z "${{result}}" ]
                then
                   echo ${{result}} tblastn | sed "s/ /\\t/g" >> {output[0]}
                fi
            fi
        done
        """

rule remove_redundancy_from_blast_results:
    conda:
        "../../envs/python-r.yml"
    container:
        containers["python_r"]
    input:
        "samples/{sample}/virulence/results_blast.tsv",
    output:
        "samples/{sample}/virulence/results_blast_not_redundant.tsv",
    script:
        "scripts/remove_overlap_from_blast_results.py"


rule extract_protein_sequences_from_blast_results:
    conda:
        "../../envs/samtools.yml"
    container:
        containers["bwa_samtools"]
    input:
        blast_res = "samples/{sample}/virulence/results_blast_not_redundant.tsv",
        annotation_prot = "samples/{sample}/annotation/{sample}.faa",
    output:
        virulence_fasta = "samples/{sample}/virulence/proteins.fasta",
    shell:
        """
        awk '$15=="blastp"' {input[blast_res]} | cut -f1,2 > {output[virulence_fasta]}.tmp
        awk '$15=="blastp"' {input[blast_res]} | cut -f2 | xargs -n 1 samtools faidx {input[annotation_prot]} > {output[virulence_fasta]}
        while read hit prokka
        do
           sed -i "s/${{prokka}}/{wildcards.sample}_${{prokka}}_(${{hit}}_homolog)/" {output[virulence_fasta]}
        done < {output[virulence_fasta]}.tmp
        awk '$15=="tblastn"' {input[blast_res]} | cut -f 13 | sed "s/-//g" > {output[virulence_fasta]}.tmp
        awk '$15=="tblastn"' {input[blast_res]} | cut -f1 | sed "s/^/>{wildcards.sample}_/" | sed "s/$/_homolog/" | paste -d"\\n" - {output[virulence_fasta]}.tmp >> {output[virulence_fasta]}
        rm {output[virulence_fasta]}.tmp
        """

if "virulence_factors" in config:
    rule add_description_to_blast_results:
        conda:
            "../../envs/python-r.yml"
        container:
            containers["python_r"]
        input:
            "samples/{sample}/virulence/results_blast_not_redundant.tsv",
            config["virulence_factors"]
        output:
            "samples/{sample}/virulence/{sample}_virulence.tsv",
            "samples/{sample}/virulence/{sample}_virulence_summary.xlsx"
        script:
            "scripts/merge_result_and_description.py"


rule merge_samples_summary:
    conda:
        "../../envs/python-r.yml"
    container:
        containers["python_r"]
    input:
        xlsx=expand("samples/{sample}/virulence/{sample}_virulence_summary.xlsx", sample = read_naming.keys()),
        fasta=expand("samples/{sample}/virulence/proteins.fasta", sample = read_naming.keys()),
    output:
        "report/virulence/virulence_summary.xlsx"
    script:
        "../../rules/annotation/resistance/scripts/merge_non_empty_results.py"

rule generate_html_report:
    conda:
        "../../envs/python-r.yml"
    container:
        containers["python_r"]
    input:
        blast_results="samples/{sample}/virulence/{sample}_virulence_summary.xlsx",
    params:
        sample="{sample}",
    output:
        "report/virulence/custom/{sample}_report.html"
    script:
        "scripts/generate_virulence_html_report.py"

rule blast_proteome_to_VFDB:
    conda:
        "../../envs/blast.yml"
    container:
        containers["blast"]
    params:
        perc_id_cutoff=config["virulence_percentage_identity_cutoff"],
        cov_cutoff=config["virulence_coverage_cutoff"],
    input:
        "references/virulence/VFDB_larger_50aa.faa",
        "samples/{sample}/annotation/{sample}.faa",
        "references/virulence/VFDB_larger_50aa.faa.phr",
    output:
        "samples/{sample}/virulence/VFDB_results_blast.tsv",
    shell:
        """
        echo "ORF_ID\tmatching_sequence\tpercentage_identity\talignment_length\tmismatch_number\tgap_number\talignment_start_on_virulence_factor\talignment_end_on_virulence_factor\talignment_start_on_matching_sequence\taligment_end_on_matching_sequence\te-value\tbitscore\tamino_acid_sequence_of_matching_sequence\tquery_coverage\talgorithm" > {output[0]}
        blastp -query {input[1]} -db {input[0]} -max_target_seqs 1 -outfmt "6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore sseq qcovs" | awk '$3>{params.perc_id_cutoff}' | awk '$14>{params.cov_cutoff}' >> {output[0]}
        """

rule generate_VFDB_report:
    conda:
        "../../envs/python-r.yml"
    container:
        containers["python_r"]
    input:
        blast_results="samples/{sample}/virulence/VFDB_results_blast.tsv",
        VFDB_annotation="references/virulence/VFDB_annotations.tab",
    params:
        sample="{sample}",
    output:
        "report/virulence/VFDB/{sample}_report.html"
    script:
        "scripts/generate_VFDB_html_report.py"


rule merge_virulence_files:
    conda:
        "../../../envs/python-r.yml"
    container:
        containers["python_r"]
    input:
         tsv=expand("samples/{sample}/virulence/VFDB_results_blast.tsv", sample = read_naming.keys()),
    output:
        "report/virulence/virulence_detail.tsv"
    script:
        "scripts/merge_virulence.py"


# needed
# tab file with contig, start, end label (and color)
rule prepare_label_file_for_circos:
    conda:
        "../../envs/python-r.yml"
    container:
        containers["python_r"]
    input:
        gbk_file="samples/{sample}/annotation/{sample}.gbff",
        blast_results="samples/{sample}/virulence/VFDB_results_blast.tsv",
        VF_annotation="references/virulence/VFDB_annotations.tab",
    output:
        "samples/{sample}/virulence/circos/VF_loc_table.tab",
    script:
        "scripts/prepare_circos_file.py"

rule circos_plot_virulence:
    input:
        depth_file="samples/{sample}/quality/mapping/bwa/{sample}_assembled_genome/mapping.depth",
        vf_table="samples/{sample}/virulence/circos/VF_loc_table.tab",
        gbk_file="samples/{sample}/annotation/{sample}.gbk",
        fna_file="samples/{sample}/annotation/{sample}.fna",
    params:
        sample="{sample}",
    output:
        "samples/{sample}/virulence/circos/nucmer2circos.png",
        "samples/{sample}/virulence/circos/nucmer2circos.svg",
    shell:
        """
        cd $(dirname {output[0]});
        /home/tpillone/work/dev/metagenlab/mummer2circos/mummer2circos.py -r ../../annotation/{wildcards.sample}.fna -gb ../../annotation/{wildcards.sample}.gbff -s ../../quality/mapping/bwa/{wildcards.sample}_assembled_genome/mapping.depth -l -lf VF_loc_table.tab

        """
