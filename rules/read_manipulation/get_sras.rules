
#try:
#    sra_download_dir = subprocess.Popen('''vdb-config --cfg -o n | grep "/repository/user/main/public/root" | cut -f2 -d'=' | sed "s/\\"//g"''', shell=True, stdout=subprocess.PIPE).stdout.read().rstrip().decode('UTF-8').replace(' ','')
#except:
#    raise IOError("Sra-tools need to be install and the sra donwload dir need to be set to perform the analysis")

rule download_sra:
    conda:
        "../../envs/sra-tools.yml"
    container:
        containers["sra-toolkit"]
    output:
        # /home/pipeline_user/ncbi/public: % os.getenv("HOME")
        temp("ncbi/public/sra/{sample}.sra" ),
    log:
        logging_folder + "samples/{sample}/sras/dump.txt"
    params:
        sra_dir = "$HOME/ncbi/public"
    shell:
        """
        #cache_dir=$(vdb-config --cfg -o n | grep "/repository/user/main/public/root" | cut -f2 -d'=' | sed "s/\\"//g")
        vdb-config --restore-defaults
        prefetch -v {wildcards.sample} --max-size 100000000 &> {log}
        """

rule sra_convert_to_fastq_paired:
    conda:
        "../../envs/sra-tools.yml"
    container:
        containers["sra-toolkit"]
    input:
        # "%s/ncbi/public/sra/{sample}.sra" % os.getenv("HOME"),
        "ncbi/public/sra/{sample}.sra",
    output:
        "sra/{sample,[A-Za-z0-9]+}_1.fastq.gz",
        "sra/{sample,[A-Za-z0-9]+}_2.fastq.gz",
    log:
        "log/sra_download/{sample}_dump.txt",
    shell:
        """
        fastq-dump --split-3 --gzip --log-level 1 --disable-multithreading --minReadLen 0 --outdir $(dirname {output[0]}) {input[0]} &> {log}
        """

rule sra_convert_to_fastq_single:
    conda:
        "../../envs/sra-tools.yml"
    container:
        containers["sra-toolkit"]
    input:
        # "%s/ncbi/public/sra/{sample}.sra" % os.getenv("HOME")
        "ncbi/public/sra/{sample}.sra",
    output:
        "sra/{sample,[A-Za-z0-9]+}.fastq.gz",
    log:
        "log/sra_download/{sample}_dump.txt"
    shell:
        """
        fastq-dump --gzip --outdir $(dirname {output[0]}) --log-level 0 --disable-multithreading --minReadLen 0 {wildcards.sample} &> {log}
        """
