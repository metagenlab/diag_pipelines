rule decompose_multiallelics_and_normalize:
    conda:
        "../../envs/vt.yml"
    container:
        containers["vt"]   
    input:
        raw="typing/{snp_caller}/full_genome_{ref}/{mapping_method}/raw/all_samples.vcf.gz",
        raw_tbi="typing/{snp_caller}/full_genome_{ref}/{mapping_method}/raw/all_samples.vcf.gz",
        ref="references/{ref}/genome_fna.fna",
    output:
        decomposed="typing/{snp_caller}/full_genome_{ref}/{mapping_method}/filtering/decomposed_normalized.vcf",
    log:
        logging_folder+"typing/{snp_caller}/full_genome_{ref}/{mapping_method}/filtering/decomposed_normalized.txt",
    shell:
        """
        vt decompose -s {input[raw]} | vt normalize -r {input[ref]} -o {output[decomposed]} - &> {log}
        """

rule filter_on_coverage:
    params:
        min_cov=minimum_coverage,
    conda:
        "../../envs/bcftools.yml"
    container:
        containers["bcftools"]   
    input:
        decomposed="typing/{snp_caller}/full_genome_{ref}/{mapping_method}/filtering/decomposed_normalized.vcf",
    output:
        vcf_cov="typing/{snp_caller}/full_genome_{ref}/{mapping_method}/filtering/cov_decomposed_normalized.vcf",
    shell:
        """
        bcftools filter -s "lowcov" -S "." -e '(FORMAT/DP)<{params.min_cov}' {input[decomposed]} > {output[vcf_cov]}
        """

rule filter_on_frequency_per_sample:
    params:
        min_alt=minimum_alternate_frac,
    container:
        containers["bcftools"]   
    conda:
        "../../envs/bcftools.yml",
    input:
        sample="samples/{sample}/snps/{snp_caller}/{ref}/{mapping_method}/raw.vcf",
    output:
        freq="samples/{sample}/snps/{snp_caller}/{ref}/{mapping_method}/freq.vcf",
    shell:
        """
        bcftools filter -s "freqalt" -S "." -e "GT='alt' & (FORMAT/AD[0:1])/(FORMAT/DP) < {params.min_alt}" {input[sample]} | bcftools filter -s "freqref" -S "." -e "GT='ref' & (FORMAT/AD[0:0])/(FORMAT/DP) < {params.min_alt}" > {output[freq]}
        """

rule extract_allele_by_type_from_gatk_gvcfs:
    conda:
        "../../envs/gatk.yml"
    container:
        containers["gatk4"] 
    input:
        joint_genotype_vcf="typing/gatk_gvcfs/full_genome_{ref}/{mapping_method}/filtering/freq_cov_decomposed_normalized.vcf.gz",
        joint_genotype_vcf_tbi="typing/gatk_gvcfs/full_genome_{ref}/{mapping_method}/filtering/freq_cov_decomposed_normalized.vcf.gz.tbi",
    output:
        vcf_mutation_type="typing/gatk_gvcfs/full_genome_{ref}/{mapping_method}/all_samples_{type}.vcf",
    log:
        logging_folder + "typing/gatk_gvcfs/full_genome_{ref}/{mapping_method}/all_samples_{type}.txt"
    shell:
        """
        type=$(echo {wildcards.type}  | tr '[:lower:]' '[:upper:]')
        gatk SelectVariants --output {output[vcf_mutation_type]} --variant {input[joint_genotype_vcf]} -select-type ${{type}} &> /dev/null
        """

rule extract_allele_by_type_from_freebayes_joint_genotyping:
    conda:
        "../../envs/bcftools.yml"
    container:
        containers["bcftools"]   
    input:
        joint_genotype_vcf="typing/freebayes_joint_genotyping/full_genome_{ref}/{mapping_method}/filtering/freq_cov_decomposed_normalized.vcf.gz",
        joint_genotype_vcf_tbi="typing/freebayes_joint_genotyping/full_genome_{ref}/{mapping_method}/filtering/freq_cov_decomposed_normalized.vcf.gz.tbi",
    output:
        vcf_mutation_type="typing/freebayes_joint_genotyping/full_genome_{ref}/{mapping_method}/all_samples_{type}.vcf",
    log:
        logging_folder + "typing/freebayes_joint_genotyping/full_genome_{ref}/{mapping_method}/all_samples_{type}.txt"
    shell:
        """
        bcftools view -i 'type="{wildcards.type}"' {input[joint_genotype_vcf]} > {output[vcf_mutation_type]}
        """

rule extract_core_genome_parsnp:
    conda:
        "../../envs/bcftools.yml"
    container:
        containers["bcftools"]  
    input:
        vcf_mutation_type = "typing/{snp_caller}/full_genome_{ref}/{mapping_method}/all_samples_{type}.vcf.gz",
        vcf_mutation_type_tbi = "typing/{snp_caller}/full_genome_{ref}/{mapping_method}/all_samples_{type}.vcf.gz.tbi",
        bed = "core_genomes/parsnp/" + species + "/{ref}.bed",
    output:
        core_genome_vcf = "typing/{snp_caller}/core_parsnp_{ref}/{mapping_method}/all_samples_{type}.vcf",
    shell:
        """
        bcftools view --regions-file {input[bed]} {input[vcf_mutation_type]} > {output[core_genome_vcf]}
        """
