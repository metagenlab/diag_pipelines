rule calculate_pairwise_distances_by_type:
    conda:
        "../../envs/bcftools.yml"
    container:
        containers["bcftools"]  
    input:
        joint_genotype_vcf="{any_analysis}/all_samples_{type}.vcf.gz",
        joint_genotype_vcf_tbi="{any_analysis}/all_samples_{type}.vcf.gz.tbi",
    output:
        dist_pair=temp("{any_analysis}/distances/{sample1}_-_{sample2}_distance_in_{type}.txt"),
    shell:
        """
        snps=$(bcftools view --samples {wildcards.sample1},{wildcards.sample2} {input[joint_genotype_vcf]} | bcftools query -f '[%GT ]\\n' | awk '$1!=$2' | grep -c -v "\.") || true
        echo {wildcards.sample1} {wildcards.sample2} ${{snps}} > {output[dist_pair]}
        """

rule get_pairwise_snps_positions_by_type:
    conda:
        "../../envs/bcftools.yml"
    container:
        containers["bcftools"]  
    input:
        joint_genotype_vcf="{any_analysis}/all_samples_{type}.vcf.gz",
        joint_genotype_vcf_tbi="{any_analysis}/all_samples_{type}.vcf.gz.tbi",
    output:
        snp_pos=temp("{any_analysis}/positions/{sample1}_-_{sample2}_in_{type}.txt"),
        variant_vcf=temp("{any_analysis}/vcfs/{sample1}_-_{sample2}_in_{type}.vcf")
    shell:
        """
        bcftools view --samples {wildcards.sample1},{wildcards.sample2} {input[joint_genotype_vcf]} | bcftools query -f '%CHROM %POS [%GT ]\\n' | awk '$3!=$4 && $3!="." && $4!="."' | cut -f 1,2 -d' ' | sed "s/ /\\t/g" > {output[snp_pos]}
        bcftools view --regions-file {output[snp_pos]} --samples {wildcards.sample1},{wildcards.sample2} {input[joint_genotype_vcf]} > {output[variant_vcf]}
        """

rule calculate_distance_with_ref_by_type:
    conda:
        "../../envs/bcftools.yml"
    container:
        containers["bcftools"] 
    input:
        joint_genotype_vcf="{any_analysis}/all_samples_{type}.vcf.gz",
        joint_genotype_vcf_tbi="{any_analysis}/all_samples_{type}.vcf.gz.tbi",
    output:
        dist_ref=temp("{any_analysis}/distances/to_ref/{sample}_distance_in_{type}.txt"),
    shell:
        """
        snps=$(bcftools view --samples {wildcards.sample} {input[joint_genotype_vcf]} | bcftools query -f '[%GT ]\\n' | grep -v "\." | grep -vc "0" ) || true
        echo ref {wildcards.sample} ${{snps}} > {output[dist_ref]}
        """

rule agregate_distances_from_joint_genotyping_by_type:
    input:
        pairs=expand("{{any_analysis}}/distances/{sample1}_-_{sample2}_distance_in_{{type}}.txt", zip, sample1 = all_combined_1, sample2 = all_combined_2),
        to_ref=expand("{{any_analysis}}/distances/to_ref/{sample}_distance_in_{{type}}.txt", sample=read_naming.keys())
    output:
        "{any_analysis}/distances_in_{type}.txt"
    run:
        with open(output[0], "w") as outfile:
            for fname in list(input.pairs) + list(input.to_ref):
                with open(fname) as infile:
                    outfile.write(infile.read())
#we aggregate the files with python because sometimes bash can't handle the high number of files
