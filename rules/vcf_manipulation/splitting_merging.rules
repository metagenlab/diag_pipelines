rule extract_sample_entry_from_vcf:
    conda:
        "../../envs/bcftools.yml",
    container:
        containers["bcftools"]  
    input:
        vcf_cov="typing/{snp_caller}/full_genome_{ref}/{mapping_method}/filtering/cov_decomposed_normalized.vcf",
    output:
        vcf_sample=temp("samples/{sample}/snps/{snp_caller}/{ref}/{mapping_method}/raw.vcf"),
    shell:
        """
        bcftools view -s {wildcards.sample} {input[vcf_cov]} > {output[vcf_sample]}
        """

rule merge_all_samples_entries_into_vcf:
    conda:
        "../../envs/bcftools.yml"
    container:
        containers["bcftools"]   
    input:
        vfcs=expand("samples/{sample}/snps/{{snp_caller}}/{{ref}}/{{mapping_method}}/freq.vcf.gz", sample=list(read_naming.keys())),
        vfcs_tbi=expand("samples/{sample}/snps/{{snp_caller}}/{{ref}}/{{mapping_method}}/freq.vcf.gz.tbi", sample=list(read_naming.keys())),
    output:
        joint_genotype_vcf="typing/{snp_caller}/full_genome_{ref}/{mapping_method}/filtering/freq_cov_decomposed_normalized.vcf",
    shell:
        """
        # deal with case when working with a single file vs reference genome
        n_files=$(ls {input[vfcs]} | wc -l)
        echo $n_files
        if [ "$n_files" -gt "1" ]; then
            bcftools merge {input[vfcs]} > {output[joint_genotype_vcf]}
        else
            zcat {input[vfcs]} > {output[joint_genotype_vcf]}
        fi
        """

rule merge_all_vcf_freebayes_first_pass:
    conda:
        "../../envs/bcftools.yml"
    container:
        containers["bcftools"]   
    input:
        vfcs = expand("samples/{sample}/typing/freebayes/first_pass/full_genome_{{ref}}/{{mapping_method}}/genotyping.vcf.gz", sample=list(read_naming.keys())),
        vfcs_tbi = expand("samples/{sample}/typing/freebayes/first_pass/full_genome_{{ref}}/{{mapping_method}}/genotyping.vcf.gz.tbi", sample=list(read_naming.keys())),
    output:
        merged_vcf = "typing/freebayes_two_pass/full_genome_{ref}/{mapping_method}/positions.vcf",
    shell:
        """
        bcftools merge {input[vfcs]} > {output[joint_genotype_vcf]}
        """

rule merge_freebayes_second_pass:
    conda:
        "../../envs/bcftools.yml"
    container:
        containers["bcftools"]    
    input:
        vfcs = expand("samples/{sample}/typing/freebayes/second_pass/full_genome_{{ref}}/{{mapping_method}}/genotyping.vcf.gz", sample=list(read_naming.keys())),
        vfcs_tbi = expand("samples/{sample}/typing/freebayes/second_pass/full_genome_{{ref}}/{{mapping_method}}/genotyping.vcf.gz.tbi", sample=list(read_naming.keys())),
    output:
        merged_vcf = "typing/freebayes_two_pass/full_genome_{ref}/{mapping_method}/raw/all_samples.vcf",
    shell:
        """
        bcftools merge {input[vfcs]} > {output[joint_genotype_vcf]}
        """
